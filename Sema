#include<config.h>
#include<stdlib.h>
#include<serial.h>
#include<lcd.h>

#define tsl 100

OS_STK Task0Stk[tsl];
OS_STK Task1Stk[tsl];

OS_Event *printsem;

void Task0(void *pdata);
void Task1(void *pdata);

int main(void)
{
	uint8 err;
	IO0DIR = 0x00FF0000;
	init_serial();
	TargetInit();
	OSInit();
	
	printsem = OSSemCreate(1);
	
	OSTaskCreate(Task0, (void *)0, Task0Stk[tsl-1], 2);
	OSTaskCreate(Task1, (void *)0, Task1Stk[tsl-1], 3);
	
	OSStart();
}


void Task0(void *pdata)
{
	uint8 err;
	int n;
	while(1){
		printf("Task0 waiting for semaphore);
		OSSemPend(printsem, 0, &err);
		printf("sema aquired");
		IO0CLR = 0xFF < 16;
		
		for(n=0; n<10; n++)
		{
			IO0SET = n << 16;
			OSTimeDly(20);
			IO0CLR = n << 16;
			OSTimeDly(20);
			
		}
		
		OSSemPost(printsem);
		printf("Sem released);
		OSTimeDly(20);
	}
}

void Task1(void *pdata)
{
	uint8 err;
	int n;
	while(1){
		printf("Task1 waiting for semaphore);
		OSSemPend(printsem, 0, &err);
		printf("sema aquired");
		IO0CLR = 0xFF < 16;
		
		for(n=0; n<10; n++)
		{
			IO0SET = 0xFF << 16;
			OSTimeDly(20);
			IO0CLR = 0xFF << 16;
			OSTimeDly(20);
			
		}
		
		OSSemPost(printsem);
		printf("Sem released);
		OSTimeDly(20);
	}
}
